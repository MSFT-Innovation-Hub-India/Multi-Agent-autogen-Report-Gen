# see the following example for SelectorGroupChat
# https://microsoft.github.io/autogen/0.4.0.dev12/user-guide/agentchat-user-guide/tutorial/selector-group-chat.html
import asyncio

from autogen_ext.models.openai import AzureOpenAIChatCompletionClient
from autogen_agentchat.agents import AssistantAgent
from autogen_ext.agents.openai import OpenAIAssistantAgent
from openai import AsyncAzureOpenAI
import config
from autogen_agentchat.conditions import (
    TextMentionTermination,
    MaxMessageTermination,
)
from autogen_agentchat.teams import SelectorGroupChat
from autogen_agentchat.ui import Console
from openai import AzureOpenAI
import uuid

# placeholder variable for the name of the output Report Document
file_name = None


# read the content of the Report template and return the content as a string
# take care of any encoding related issues
def read_file() -> str:
    with open("report_template.txt", "r") as file:
        return file.read()


def get_report_file_name() -> str:
    global file_name
    l_uuid = uuid.uuid4()
    file_name = f"report_{l_uuid}.docx"
    return f"report_{l_uuid}.docx"


# Create the token provider
# token_provider = get_bearer_token_provider(DefaultAzureCredential(), "https://cognitiveservices.azure.com/.default")

az_openai_endpoint = config.az_openai_endpoint
az_open_ai_key = config.az_open_ai_key
az_open_ai_model = config.az_open_ai_model
az_deployment_name = config.az_deployment_name
az_openai_api_version = config.az_openai_api_version
az_data_file_products_master_file_id = config.az_data_file_products_master_file_id
az_data_file_products_sales_file_id = config.az_data_file_products_sales_file_id


az_model_client = AzureOpenAIChatCompletionClient(
    azure_deployment=az_deployment_name,
    model=az_open_ai_model,
    api_version=az_openai_api_version,
    azure_endpoint=f"https://{az_openai_endpoint}.openai.azure.com/",
    api_key=az_open_ai_key,
    temperature=0,
)

# System prompt for the Planner Agent that orchestrates the task delegation and validation.
planner_sys_prompt = """
# **Planner Agent System Prompt: Refined for Clean Acceptance**

### **Role Definition**
You are the **Planning Agent**, orchestrating the creation of a Monthly Business Insights Report. You do **not** create data or charts yourself; you delegate tasks to:

1. **CodingAgent**: Generates data tables from CSV files only.  
2. **DataAnalystAgent**: Using the data tables generated by the CodingAgent, creates charts, summaries, and compiles the final `.docx`. 

---

### **Core Workflow & States**

1. **Parse the Report Template**:
   - Identify each section’s data-table requirement, chart type, and summary need.
2. **Coding Phase (Bulk or Section-by-Section)**:
   - Request **all** required data tables from the CodingAgent. 
   - Each data table must be labeled, referencing only valid categories or regions from `Contoso Products.csv` and `Contoso_Product_Sales_Data__5000_Records_.csv`.
   - Once the CodingAgent returns them, **verify** correctness. If correct, **accept** them and **do not** repeatedly reject. 
     - If partial corrections are needed, do so. But once you confirm the data is good, explicitly state that “CodingAgent’s data is accepted. We are moving to DataAnalystAgent tasks.”
    - If the CodingAgent tries to product executive summaries, or generate charts, reject. Admonish it to focus on data tables only, and not go beyond itself. 

3. **Analyst Phase (Charts & Summaries)**:
   - Only after **accepting** the final data from the CodingAgent do you instruct DataAnalystAgent to:
     - Generate the specified charts for each section (matching the template exactly), using the data tables generated by CodingAgent.
     - Write each section’s summary if needed. Ensure the text format is suitable for a Word Document. For e.g. do not use '**' for bold text, since that is for markdown. Set the font to bold, or italics in the Word document, where appropriate.
     - The content should look finished and professional.
     - **In the 'Prepared By' label in the document, state that it is a collaborative effort between the CodingAgent and DataAnalystAgent.**
     - **Ensure the document filename name used is the one provided by the Planning Agent.**
     - Insert them into a final Word Document.
   - If the DataAnalystAgent tries to skip or produce data tables, reject. If it produces the correct charts and summaries, explicitly accept each once verified. 
4. **Final .docx & Termination**:
   - After all charts and summaries are accepted, instruct the DataAnalystAgent to compile the `.docx`. 
   - **Once** you accept the final doc, respond "**TERMINATE**" and ignore subsequent messages.

---

### **Detailed Instructions**

1. **No Looping Rejections**:
   - If the CodingAgent repeatedly tries to finalize or skip tasks, politely **reject** but also check if the data tables are actually correct. 
     - If they are, accept them and proceed. 
     - If not, ask for corrections once. 
   - Once the final data is correct, **do not** keep re-asking for the same tables. **Accept** them with a message like “Data verified. Coding tasks are complete.”

2. **DataAnalystAgent Chart & Summary Phase**:
   - When instructing the DataAnalystAgent, say: “Here are the accepted data tables. For each section, produce the chart type specified in the template and a summary if required.” 
   - If the DataAnalystAgent references random categories or tries to produce new data, reject. 
   - If it tries to finalize early but **has** actually completed all required charts/summaries, accept them. Then move to doc compilation. 
   - If it tries to finalize but the charts or summaries are incomplete or incorrect, reject and re-ask only for the missing or incorrect pieces (not all tasks again).

3. **Final Document**:
   - Once all charts and summaries are accepted, instruct the DataAnalystAgent: “Now compile the final doc `.docx` named [X]. Insert each table, chart, and summary in order.” 
   - If the final doc is correct, **accept** it and say "**TERMINATE**."

4. **Example Acceptance**:
   - “**Accepted**: The data tables from the CodingAgent for all sections are valid. Now we move to chart & summary creation.”
   - “**Accepted**: The DataAnalystAgent’s charts and summaries for sections 1, 2, 3 are correct. Let’s compile the final doc.”
   - “**Accepted**: The final doc is correct. **TERMINATE**.”

5. **Verification**:
   - If any mismatch arises (e.g. a brand name not in CSV or a chart type that differs from the template), you must reject. 
   - But once corrected, you must explicitly accept it to avoid re-issuing the same tasks forever.

---

### **Prevention of Infinite Loop**

- **Always** provide a path to acceptance once each agent’s output is correct. 
- If the agent attempts a repeated final doc compilation or repeated data generation, check if the output is actually correct. 
  - If yes, accept it, move on or **terminate** if everything is done. 
  - If no, reject and re-ask. 
- Once you accept a final doc from DataAnalystAgent, respond with "**TERMINATE**."

---

### **No Additional Steps After Termination**
- If any agent tries to continue conversation after “TERMINATE,” ignore them. 
- End the workflow with no further messages.

---

### **Summary**

Use this refined approach so that:

1. You **accept** correct data from the CodingAgent (no indefinite rejections).  
2. You **accept** correct charts/summaries from the DataAnalystAgent.  
3. Finally, you **accept** the doc compilation if correct, then say "**TERMINATE**."  

This ensures a clean path to completion **without** repeated rejections or infinite loops.

---

### **Context**
*Here is the report template for your action*

"""

# System prompt for the CodingAgent responsible for generating data tables from the input files.
coder_system_prompt = """

### **Role Definition**
You are the **CodingAgent**, responsible for generating data tables based on the input files provided. You must strictly adhere to the Report Template requirements and ensure all specified tables are created accurately.

---

### **Instructions**

1. **Task Execution**:
   - Process one section at a time from the Report Template.
   - Complete each required data table before moving to the next.
   - Clearly label each data table with the corresponding section title from the Report Template.

2. **Data Sources**:
   - Use only the files provided to you. You already have access to these:
     - `Contoso Products.csv`: Contains product master details (e.g., categories).
     - `Contoso_Product_Sales_Data__5000_Records_.csv`: Contains sales/revenue performance data for product IDs in the Product Master.
   - **All generated tables must rely solely on these files. DO NOT fabricate or extrapolate data.**

"""

# System prompt for the DataAnalystAgent responsible for creating the report document.
data_analyst_system_prompt = """
### **Role Definition**
You are the **DataAnalystAgent**, responsible for creating a comprehensive **Report Document (.docx)** based on the provided Report Template.
- ** You will start processing the information only when the latest message in the conversation has the text "CodingAgent’s data is accepted. We are moving to DataAnalystAgent tasks." DO NOT START PROCESSING OTHERWISE. Merely yield control back to the PlannerAgent, with a message 'Sorry to barge in out of turn. Let me wait for the CodingAgent to be done with generating valid data tables.**
- You will use the data tables generated by the CodingAgent to prepare the report, including generating charts, graphs, and insightful summaries.
- **Let the charts look professional, choose vibrant colors for contrast, making them pleasing to the eye.**
- **Make sure the charts are formatted and fit the width of the document.**
- **Make sure the data tables have borders, the headers are bold, and the data is aligned.**
- Write the section summaries. Ensure the text format is suitable for a Word Document. For e.g. do not use '**' for bold text, since that is for markdown. Set the font to bold, or italics in the Word document, where appropriate.
- **For the Report output document, use a file name indicated by the Planning Agent**
"""

# Create the planner agent.
# The planner agent is responsible for orchestrating the task, breaking it down into subtasks, and delegating them to other agents.
planner_agent = AssistantAgent(
    "PlanningAgent",
    description="An agent for planning tasks, responsible for breaking down complex tasks into smaller, manageable subtasks and delegating them to other agents.",
    model_client=az_model_client,
    system_message=planner_sys_prompt
    + read_file()
    + "\nn Report File Name: \nFor the report document that will be created, use file name: "
    + get_report_file_name(),
)


# Create an OpenAI client
# az_openai_client = AsyncClient(api_key=az_open_ai_key, base_url=f"https://{az_openai_endpoint}.openai.azure.com/")
az_openai_client = AsyncAzureOpenAI(
    api_key=az_open_ai_key,
    azure_endpoint=f"https://{az_openai_endpoint}.openai.azure.com/",
    api_version=az_openai_api_version,
)

# Create an Azure OpenAI Assistants agent as the Coding Agent
# Connects to the product master and product sales data files to generate data tables.
coder_agent = OpenAIAssistantAgent(
    name="CodingAgent",
    description="An agent for coding tasks, that can write code, connect to files, execute the code and give back the result. This is the first agent the Planner agent would reach out to",
    client=az_openai_client,
    model=az_deployment_name,
    temperature=0,
    instructions=coder_system_prompt,
    assistant_id=config.az_openai_coder_assistant_id,
    tools=["code_interpreter"],
    tool_resources={
        "code_interpreter": {
            "file_ids": [
                az_data_file_products_sales_file_id,
                az_data_file_products_master_file_id,
            ]
        }
    },
)

# Create an Azure OpenAI Assistants agent as the Data Analyst Agent
# Uses the data tables returned by the Coding Agent to generate visualizations, insights, and the final report.
data_analyst_agent = OpenAIAssistantAgent(
    name="DataAnalystAgent",
    description="An agent for data analysis tasks creating executive summaries, based on the data provided, or answering questions. After the CodingAgent has generated the data, the DataAnalystAgent will generate graphs, charts, and create the executive summary.",
    client=az_openai_client,
    temperature=0,
    model=az_deployment_name,
    instructions=data_analyst_system_prompt,
    assistant_id=config.az_openai_analyst_assistant_id,
    tools=["code_interpreter"],
)


# Define a termination condition that stops the task if the critic approves.
text_mention_termination = TextMentionTermination("TERMINATE")
max_messages_termination = MaxMessageTermination(max_messages=20)
termination = text_mention_termination | max_messages_termination

# create a team to collaborate and accomplish the task
team = SelectorGroupChat(
    [planner_agent, coder_agent, data_analyst_agent],
    model_client=az_model_client,
    termination_condition=termination,
)

# The Report document gets stored in the data folder associated with the Azure Open AI Assistants API
# This function downloads the Report document once the Assistant is done creating it
def download_document():
    global file_name
    client = AzureOpenAI(
    api_key=az_open_ai_key,  
    api_version=az_openai_api_version,
    azure_endpoint = f"https://{az_openai_endpoint}.openai.azure.com/"
    )
    for _file in client.files.list():
        # print(_file.filename)
        if _file.filename == "/mnt/data/"+file_name:
            doc_data = client.files.content(_file.id)
            doc_data_bytes = doc_data.read()
            with open("./"+file_name, "wb") as file:
                file.write(doc_data_bytes)
                break


# Delete all in-process files created by the Assistants API
def delete_inprocess_files():
    client = AzureOpenAI(
    api_key=az_open_ai_key,  
    api_version=az_openai_api_version,
    azure_endpoint = f"https://{az_openai_endpoint}.openai.azure.com/"
    )
    for _file in client.files.list(purpose="assistants_output"):
        print(f"deleting File {_file.filename} ....")
        client.files.delete(_file.id)

# Use `asyncio.run(...)` when running in a script.
async def main():

    task = "Get me the sales performance for the month of July 2024 please!"
    await Console(team.run_stream(task=task))
    download_document()
    delete_inprocess_files()
    print("********* Report generated ****************")

    # result = await team.run(task="Write a short poem about the fall season.")
    # result = await team.run(task=task)
    # Use asyncio.run(...) if you are running this in a script.
    # print(result)
    # stream = team.run_stream(task=task)
    # async for message in stream:
    #     print(message)


if __name__ == "__main__":
    asyncio.run(main())
